<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mindful Break | Sales Dashboard</title>
    <link rel="icon" type="image/png" href="favicon.png">s
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --accent: #4cc9f0;
            --dark: #1d3557;
            --light: #f1faee;
            --success: #2ec4b6;
            --warning: #ff9f1c;
            --danger: #e63946;
            --gray: #8d99ae;
            --card-bg: rgba(255, 255, 255, 0.95);
            --bg-gradient: linear-gradient(135deg, #1d2b64 0%, #1d3557 100%);
        }
        
        body {
            background: var(--bg-gradient);
            color: #333;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .rest-container {
            max-width: 900px;
            width: 100%;
            background: var(--card-bg);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.25);
        }
        
        .rest-header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 35px 30px;
            text-align: center;
            position: relative;
        }
        
        .rest-header h1 {
            font-size: 2.8rem;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }
        
        .rest-header p {
            font-size: 1.2rem;
            max-width: 600px;
            margin: 0 auto;
            opacity: 0.9;
            line-height: 1.6;
        }
        
        .rest-content {
            padding: 40px 30px;
        }
        
        .timer-controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 25px;
            margin-bottom: 35px;
        }
        
        .timer-setup {
            display: flex;
            align-items: center;
            background: white;
            border-radius: 50px;
            padding: 8px 30px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.12);
            border: 2px solid var(--primary);
        }
        
        .timer-setup input {
            width: 70px;
            padding: 12px 8px;
            border: none;
            font-size: 1.8rem;
            font-weight: 700;
            text-align: center;
            color: var(--primary);
            background: transparent;
        }
        
        .timer-setup span {
            color: var(--dark);
            font-size: 1.2rem;
            margin-left: 5px;
            font-weight: 600;
        }
        
        .game-selector {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 40px;
            flex-wrap: wrap;
        }
        
        .game-card {
            background: white;
            border-radius: 18px;
            padding: 30px 25px;
            width: 250px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border: 3px solid transparent;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .game-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, var(--primary), var(--accent));
        }
        
        .game-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 35px rgba(67, 97, 238, 0.25);
            border-color: var(--primary);
        }
        
        .game-card.active {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.03);
            transform: translateY(-5px);
        }
        
        .game-icon {
            font-size: 65px;
            margin: 15px 0 25px;
            color: var(--primary);
            transition: all 0.3s ease;
        }
        
        .game-card:hover .game-icon {
            transform: scale(1.15);
            color: var(--secondary);
        }
        
        .game-card h3 {
            font-size: 1.8rem;
            color: var(--dark);
            margin-bottom: 15px;
        }
        
        .game-card p {
            color: var(--gray);
            font-size: 1.1rem;
            line-height: 1.5;
        }
        
        .btn {
            padding: 16px 45px;
            border-radius: 50px;
            border: none;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 12px;
            font-size: 1.2rem;
            letter-spacing: 1px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: white;
            box-shadow: 0 8px 25px rgba(67, 97, 238, 0.4);
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, var(--secondary), var(--primary));
            transform: translateY(-3px);
            box-shadow: 0 12px 30px rgba(67, 97, 238, 0.5);
        }
        
        .btn-primary:active {
            transform: translateY(1px);
        }
        
        .game-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.92);
            z-index: 1000;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .modal-content {
            background: white;
            border-radius: 20px;
            width: 100%;
            max-width: 800px;
            box-shadow: 0 25px 60px rgba(0, 0, 0, 0.4);
            position: relative;
            overflow: hidden;
            animation: modalAppear 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }
        
        @keyframes modalAppear {
            0% { transform: translateY(50px) scale(0.9); opacity: 0; }
            100% { transform: translateY(0) scale(1); opacity: 1; }
        }
        
        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: white;
            padding: 25px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
        }
        
        .modal-header::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: rgba(255, 255, 255, 0.3);
        }
        
        .modal-header h2 {
            font-size: 1.8rem;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .timer-display {
            background: rgba(0, 0, 0, 0.2);
            padding: 12px 28px;
            border-radius: 50px;
            font-size: 1.5rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .close-modal {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            width: 42px;
            height: 42px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .close-modal:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }
        
        .modal-body {
            padding: 35px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        /* Tic Tac Toe specific styles */
        #tic-tac-toe-section {
            display: block;
        }
        
        #sudoku-section {
            display: none;
        }
        
        .side-selection {
            display: flex;
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .side-btn {
            width: 100px;
            height: 100px;
            border-radius: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3.5rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
            background: white;
            border: 3px solid transparent;
        }
        
        .side-btn.x {
            color: var(--primary);
        }
        
        .side-btn.o {
            color: var(--success);
        }
        
        .side-btn:hover {
            transform: scale(1.08);
            border-color: currentColor;
        }
        
        .side-btn.selected {
            border-color: currentColor;
            background: rgba(67, 97, 238, 0.05);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            transform: scale(1.12);
        }
        
        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-gap: 15px;
            margin: 30px auto;
            max-width: 420px;
            width: 100%;
            aspect-ratio: 1/1;
        }
        
        .cell {
            background: rgba(67, 97, 238, 0.08);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 4.5rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            position: relative;
            overflow: hidden;
        }
        
        .cell::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: currentColor;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 0;
        }
        
        .cell:hover::before {
            opacity: 0.1;
        }
        
        .cell.x {
            color: var(--primary);
        }
        
        .cell.o {
            color: var(--success);
        }
        
        .cell.x::after {
            content: 'X';
            position: relative;
            z-index: 1;
            animation: appear 0.4s ease-out;
        }
        
        .cell.o::after {
            content: 'O';
            position: relative;
            z-index: 1;
            animation: appear 0.4s ease-out;
        }
        
        @keyframes appear {
            0% { transform: scale(0.8); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .game-status {
            font-size: 1.5rem;
            font-weight: 700;
            text-align: center;
            min-height: 50px;
            margin: 20px 0;
            padding: 15px 25px;
            border-radius: 12px;
            background: rgba(67, 97, 238, 0.05);
            color: var(--dark);
            width: 100%;
            max-width: 500px;
        }
        
        .game-controls {
            display: flex;
            gap: 20px;
            margin-top: 20px;
            width: 100%;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .btn-secondary {
            background: white;
            color: var(--dark);
            border: 2px solid var(--primary);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            padding: 14px 30px;
        }
        
        .btn-secondary:hover {
            background: rgba(67, 97, 238, 0.05);
            transform: translateY(-3px);
        }
        
        .motivation-section {
            margin-top: 35px;
            padding: 20px;
            background: rgba(67, 97, 238, 0.05);
            border-radius: 15px;
            text-align: center;
            border-left: 4px solid var(--primary);
            width: 100%;
            max-width: 600px;
            display: none;
        }
        
        .motivation-section p {
            font-size: 1.3rem;
            color: var(--dark);
            font-style: italic;
            font-weight: 500;
        }
        
        /* Sudoku specific styles */
        .sudoku-controls {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
            width: 100%;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .difficulty-selector {
            display: flex;
            gap: 12px;
            background: white;
            padding: 8px;
            border-radius: 50px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .difficulty-btn {
            padding: 10px 20px;
            border-radius: 50px;
            border: none;
            background: transparent;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .difficulty-btn.active {
            background: var(--primary);
            color: white;
        }
        
        .sudoku-grid {
            display: grid;
            grid-template-columns: repeat(9, 1fr);
            gap: 2px;
            max-width: 500px;
            width: 100%;
            margin: 0 auto;
            border: 3px solid var(--dark);
            border-radius: 5px;
            overflow: hidden;
            background: var(--dark);
        }
        
        .sudoku-cell {
            aspect-ratio: 1/1;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            font-weight: bold;
            cursor: pointer;
            position: relative;
            user-select: none;
        }
        
        .sudoku-cell.fixed {
            background: rgba(67, 97, 238, 0.05);
            color: var(--primary);
        }
        
        .sudoku-cell.user-input {
            color: var(--success);
        }
        
        .sudoku-cell:nth-child(3n):not(:nth-child(9n)) {
            border-right: 3px solid var(--dark);
        }
        
        .sudoku-cell:nth-child(n+19):nth-child(-n+27),
        .sudoku-cell:nth-child(n+46):nth-child(-n+54) {
            border-bottom: 3px solid var(--dark);
        }
        
        .hint-buttons {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            width: 100%;
            justify-content: center;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .game-card {
                width: 100%;
                max-width: 350px;
            }
            
            .game-board {
                max-width: 350px;
            }
            
            .cell {
                font-size: 3.5rem;
            }
            
            .side-btn {
                width: 80px;
                height: 80px;
                font-size: 2.8rem;
            }
            
            .sudoku-grid {
                max-width: 90vw;
            }
        }
        
        @media (max-width: 480px) {
            .rest-header {
                padding: 25px 20px;
            }
            
            .rest-header h1 {
                font-size: 2.2rem;
            }
            
            .game-board {
                max-width: 280px;
            }
            
            .side-selection {
                gap: 15px;
            }
            
            .side-btn {
                width: 70px;
                height: 70px;
                font-size: 2.5rem;
            }
            
            .sudoku-cell {
                font-size: 1.4rem;
            }
        }
    </style>
</head>
<body>
    <div class="rest-container">
        <div class="rest-header">
            <h1><i class="fas fa-brain"></i> Rest Your Mind</h1>
            <p>Take a mindful break with a quick game. Return refreshed and focused.</p>
        </div>
        
        <div class="rest-content">
            <div class="timer-controls">
                <div class="timer-setup">
                    <input type="number" id="minutes" min="1" max="15" value="5">
                    <span>minutes</span>
                </div>
            </div>
            
            <div class="game-selector">
                <div class="game-card active" data-game="tictactoe">
                    <div class="game-icon">
                        <i class="fas fa-times-circle"></i>
                    </div>
                    <h3>Tic Tac Toe</h3>
                    <p>Play against our smart AI. Choose X or O and test your strategy.</p>
                </div>
                
                <div class="game-card" data-game="sudoku">
                    <div class="game-icon">
                        <i class="fas fa-th"></i>
                    </div>
                    <h3>Sudoku</h3>
                    <p>Challenge your logical thinking with number puzzles.</p>
                </div>
            </div>
            
            <div style="text-align: center; margin: 30px 0 20px;">
                <button class="btn btn-primary" id="start-game">
                    <i class="fas fa-play-circle"></i> Start Mindful Break
                </button>
            </div>
        </div>
    </div>
    
    <!-- Game Modal -->
    <div class="game-modal" id="game-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-times-circle" id="game-icon"></i> <span id="game-title">Tic Tac Toe Challenge</span></h2>
                <div class="timer-display">
                    <i class="fas fa-clock"></i>
                    <span id="time-left">05:00</span>
                </div>
                <div class="close-modal" id="close-modal">
                    <i class="fas fa-times"></i>
                </div>
            </div>
            
            <div class="modal-body">
                <!-- Tic Tac Toe Section -->
                <div id="tic-tac-toe-section">
                    <div class="side-selection">
                        <div class="side-btn x selected" data-side="x">X</div>
                        <div class="side-btn o" data-side="o">O</div>
                    </div>
                    
                    <div class="game-status" id="game-status">Your turn! Place your X</div>
                    
                    <div class="game-board" id="tic-tac-toe-board">
                        <div class="cell" data-index="0"></div>
                        <div class="cell" data-index="1"></div>
                        <div class="cell" data-index="2"></div>
                        <div class="cell" data-index="3"></div>
                        <div class="cell" data-index="4"></div>
                        <div class="cell" data-index="5"></div>
                        <div class="cell" data-index="6"></div>
                        <div class="cell" data-index="7"></div>
                        <div class="cell" data-index="8"></div>
                    </div>
                </div>
                
                <!-- Sudoku Section -->
                <div id="sudoku-section">
                    <div class="sudoku-controls">
                        <div class="difficulty-selector">
                            <button class="difficulty-btn active" data-difficulty="easy">Easy</button>
                            <button class="difficulty-btn" data-difficulty="medium">Medium</button>
                            <button class="difficulty-btn" data-difficulty="hard">Hard</button>
                        </div>
                    </div>
                    
                    <div class="sudoku-grid" id="sudoku-grid">
                        <!-- Sudoku grid will be generated by JavaScript -->
                    </div>
                    
                    <div class="hint-buttons">
                        <button class="btn btn-secondary" id="reveal-one">
                            <i class="fas fa-lightbulb"></i> Reveal One Number
                        </button>
                        <button class="btn btn-secondary" id="reveal-all">
                            <i class="fas fa-eye"></i> Show Solution
                        </button>
                    </div>
                </div>
                
                <div class="game-controls">
                    <button class="btn btn-primary" id="new-game">
                        <i class="fas fa-redo"></i> New Game
                    </button>
                    <button class="btn btn-secondary" id="end-break">
                        <i class="fas fa-step-forward"></i> End Break Early
                    </button>
                </div>
                
                <div class="motivation-section" id="motivation-section">
                    <p id="motivation-message">"Hey finish up this game and let's get back to it!"</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Game selection
            const gameCards = document.querySelectorAll('.game-card');
            let selectedGame = 'tictactoe';
            
            gameCards.forEach(card => {
                card.addEventListener('click', () => {
                    gameCards.forEach(c => c.classList.remove('active'));
                    card.classList.add('active');
                    selectedGame = card.dataset.game;
                });
            });
            
            // Timer functionality
            const minutesInput = document.getElementById('minutes');
            const timeLeftDisplay = document.getElementById('time-left');
            const gameModal = document.getElementById('game-modal');
            const closeModal = document.getElementById('close-modal');
            const startGameBtn = document.getElementById('start-game');
            const newGameBtn = document.getElementById('new-game');
            const endBreakBtn = document.getElementById('end-break');
            const motivationSection = document.getElementById('motivation-section');
            const motivationMessage = document.getElementById('motivation-message');
            const gameTitle = document.getElementById('game-title');
            const gameIcon = document.getElementById('game-icon');
            
            let timerInterval;
            let secondsLeft;
            let motivationShown = false;
            
            startGameBtn.addEventListener('click', () => {
                const minutes = parseInt(minutesInput.value) || 5;
                if (minutes < 1 || minutes > 15) {
                    alert('Please enter a time between 1 and 15 minutes');
                    return;
                }
                
                secondsLeft = minutes * 60;
                updateTimerDisplay();
                motivationShown = false;
                motivationSection.style.display = 'none';
                
                // Set game title and icon
                if (selectedGame === 'tictactoe') {
                    gameTitle.textContent = "Tic Tac Toe Challenge";
                    gameIcon.className = "fas fa-times-circle";
                    document.getElementById('tic-tac-toe-section').style.display = 'block';
                    document.getElementById('sudoku-section').style.display = 'none';
                    resetTicTacToe();
                } else {
                    gameTitle.textContent = "Sudoku Puzzle";
                    gameIcon.className = "fas fa-th";
                    document.getElementById('tic-tac-toe-section').style.display = 'none';
                    document.getElementById('sudoku-section').style.display = 'block';
                    generateSudoku();
                }
                
                gameModal.style.display = 'flex';
                
                // Start timer
                clearInterval(timerInterval);
                timerInterval = setInterval(() => {
                    secondsLeft--;
                    updateTimerDisplay();
                    
                    // Show motivation message at 30 seconds
                    if (secondsLeft <= 30 && !motivationShown) {
                        motivationMessage.textContent = "Hey finish up this game and let's get back to it!";
                        motivationSection.style.display = 'block';
                        motivationShown = true;
                        
                        // Add animation for attention
                        motivationSection.animate([
                            { transform: 'scale(1)' },
                            { transform: 'scale(1.05)' },
                            { transform: 'scale(1)' }
                        ], {
                            duration: 1000,
                            iterations: 2
                        });
                    }
                    
                    if (secondsLeft <= 0) {
                        clearInterval(timerInterval);
                        motivationMessage.textContent = "Time's up! Hope you feel refreshed and ready to continue!";
                        motivationSection.style.display = 'block';
                        
                        // Auto-close after 5 seconds
                        setTimeout(() => {
                            gameModal.style.display = 'none';
                        }, 5000);
                    }
                }, 1000);
            });
            
            closeModal.addEventListener('click', () => {
                gameModal.style.display = 'none';
                clearInterval(timerInterval);
            });
            
            endBreakBtn.addEventListener('click', () => {
                gameModal.style.display = 'none';
                clearInterval(timerInterval);
            });
            
            function updateTimerDisplay() {
                const minutes = Math.floor(secondsLeft / 60);
                const seconds = secondsLeft % 60;
                timeLeftDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                // Change color when time is running low
                if (minutes === 0 && seconds <= 30) {
                    timeLeftDisplay.style.color = 'var(--warning)';
                } else {
                    timeLeftDisplay.style.color = 'white';
                }
            }
            
            // Tic Tac Toe Game Logic with AI
            const cells = document.querySelectorAll('.cell');
            const gameStatus = document.getElementById('game-status');
            const sideButtons = document.querySelectorAll('.side-btn');
            let playerSide = 'x'; // 'x' or 'o'
            let aiSide = 'o';
            let gameBoard = ['', '', '', '', '', '', '', '', ''];
            let gameActive = true;
            
            // Side selection
            sideButtons.forEach(button => {
                button.addEventListener('click', () => {
                    sideButtons.forEach(b => b.classList.remove('selected'));
                    button.classList.add('selected');
                    playerSide = button.dataset.side;
                    aiSide = playerSide === 'x' ? 'o' : 'x';
                    resetTicTacToe();
                });
            });
            
            // Handle cell clicks
            cells.forEach(cell => {
                cell.addEventListener('click', handleCellClick);
            });
            
            function handleCellClick(e) {
                if (!gameActive) return;
                
                const cell = e.target;
                const index = cell.dataset.index;
                
                // Only allow click on empty cells
                if (gameBoard[index] !== '') return;
                
                // Place player move
                makeMove(index, playerSide);
                
                // Check for win or draw
                if (checkWinner(playerSide)) {
                    gameStatus.textContent = playerSide === 'x' ? 'You win! Great job!' : 'You win! Excellent move!';
                    gameActive = false;
                    return;
                }
                
                if (checkDraw()) {
                    gameStatus.textContent = "It's a draw! Well played!";
                    gameActive = false;
                    return;
                }
                
                // AI's turn
                gameStatus.textContent = "AI is thinking...";
                setTimeout(makeAiMove, 600);
            }
            
            function makeMove(index, side) {
                gameBoard[index] = side;
                const cell = document.querySelector(`.cell[data-index="${index}"]`);
                cell.classList.add(side);
                cell.style.pointerEvents = 'none';
            }
            
            function makeAiMove() {
                if (!gameActive) return;
                
                // AI makes a move using minimax algorithm
                const bestMove = getBestMove();
                makeMove(bestMove, aiSide);
                
                // Check for win or draw
                if (checkWinner(aiSide)) {
                    gameStatus.textContent = aiSide === 'x' ? 'X wins! Try again?' : 'O wins! Better luck next time!';
                    gameActive = false;
                    return;
                }
                
                if (checkDraw()) {
                    gameStatus.textContent = "It's a draw! Well played!";
                    gameActive = false;
                    return;
                }
                
                gameStatus.textContent = `Your turn! Place your ${playerSide.toUpperCase()}`;
            }
            
            function getBestMove() {
                // Simple AI that uses minimax algorithm for optimal moves
                
                // Check for winning move
                for (let i = 0; i < 9; i++) {
                    if (gameBoard[i] === '') {
                        gameBoard[i] = aiSide;
                        if (checkWinner(aiSide)) {
                            gameBoard[i] = '';
                            return i;
                        }
                        gameBoard[i] = '';
                    }
                }
                
                // Block player's winning move
                for (let i = 0; i < 9; i++) {
                    if (gameBoard[i] === '') {
                        gameBoard[i] = playerSide;
                        if (checkWinner(playerSide)) {
                            gameBoard[i] = '';
                            return i;
                        }
                        gameBoard[i] = '';
                    }
                }
                
                // Try to take center
                if (gameBoard[4] === '') return 4;
                
                // Try to take a corner
                const corners = [0, 2, 6, 8];
                const availableCorners = corners.filter(i => gameBoard[i] === '');
                if (availableCorners.length > 0) {
                    return availableCorners[Math.floor(Math.random() * availableCorners.length)];
                }
                
                // Take any available edge
                const edges = [1, 3, 5, 7];
                const availableEdges = edges.filter(i => gameBoard[i] === '');
                if (availableEdges.length > 0) {
                    return availableEdges[Math.floor(Math.random() * availableEdges.length)];
                }
                
                // Shouldn't reach here
                return -1;
            }
            
            function checkWinner(side) {
                const winPatterns = [
                    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                    [0, 4, 8], [2, 4, 6]             // diagonals
                ];
                
                return winPatterns.some(pattern => {
                    const [a, b, c] = pattern;
                    return gameBoard[a] === side && 
                           gameBoard[b] === side && 
                           gameBoard[c] === side;
                });
            }
            
            function checkDraw() {
                return gameBoard.every(cell => cell !== '');
            }
            
            function resetTicTacToe() {
                gameBoard = ['', '', '', '', '', '', '', '', ''];
                gameActive = true;
                
                cells.forEach(cell => {
                    cell.classList.remove('x', 'o');
                    cell.style.pointerEvents = 'auto';
                });
                
                // Set initial status based on player side
                if (playerSide === 'x') {
                    gameStatus.textContent = "Your turn! Place your X";
                } else {
                    gameStatus.textContent = "AI is thinking...";
                    setTimeout(makeAiMove, 800);
                }
            }
            
            // Initialize Tic Tac Toe
            newGameBtn.addEventListener('click', () => {
                if (selectedGame === 'tictactoe') {
                    resetTicTacToe();
                } else {
                    generateSudoku();
                }
            });
            
            // Sudoku Game Logic
            const sudokuGrid = document.getElementById('sudoku-grid');
            const difficultyButtons = document.querySelectorAll('.difficulty-btn');
            const revealOneBtn = document.getElementById('reveal-one');
            const revealAllBtn = document.getElementById('reveal-all');
            
            let sudokuBoard = [];
            let solutionBoard = [];
            let difficulty = 'easy';
            
            // Difficulty selection
            difficultyButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    difficultyButtons.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    difficulty = btn.dataset.difficulty;
                    generateSudoku();
                });
            });
            
            // Generate Sudoku
            function generateSudoku() {
                sudokuGrid.innerHTML = '';
                sudokuBoard = [];
                
                // Create empty board
                for (let i = 0; i < 9; i++) {
                    sudokuBoard[i] = new Array(9).fill(0);
                }
                
                // Generate a valid Sudoku solution
                generateSolution();
                
                // Store the solution
                solutionBoard = JSON.parse(JSON.stringify(sudokuBoard));
                
                // Remove numbers based on difficulty
                let cellsToRemove;
                if (difficulty === 'easy') cellsToRemove = 30;
                else if (difficulty === 'medium') cellsToRemove = 40;
                else cellsToRemove = 50;
                
                for (let i = 0; i < cellsToRemove; i++) {
                    const row = Math.floor(Math.random() * 9);
                    const col = Math.floor(Math.random() * 9);
                    
                    if (sudokuBoard[row][col] !== 0) {
                        sudokuBoard[row][col] = 0;
                    }
                }
                
                // Render the board
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        const cell = document.createElement('div');
                        cell.className = 'sudoku-cell';
                        cell.dataset.row = row;
                        cell.dataset.col = col;
                        
                        if (sudokuBoard[row][col] !== 0) {
                            cell.textContent = sudokuBoard[row][col];
                            cell.classList.add('fixed');
                        } else {
                            cell.classList.add('user-input');
                            cell.contentEditable = true;
                            
                            // Allow only numbers 1-9
                            cell.addEventListener('input', function() {
                                this.textContent = this.textContent.replace(/[^1-9]/g, '');
                                if (this.textContent.length > 1) {
                                    this.textContent = this.textContent.slice(0, 1);
                                }
                                
                                // Update board state
                                sudokuBoard[row][col] = this.textContent ? parseInt(this.textContent) : 0;
                            });
                        }
                        
                        sudokuGrid.appendChild(cell);
                    }
                }
            }
            
            function generateSolution() {
                // Simple method to generate a valid Sudoku solution
                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 9; j++) {
                        if (sudokuBoard[i][j] === 0) {
                            const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];
                            shuffle(nums);
                            
                            for (let k = 0; k < nums.length; k++) {
                                if (isValidPlacement(i, j, nums[k])) {
                                    sudokuBoard[i][j] = nums[k];
                                    
                                    if (generateSolution()) {
                                        return true;
                                    }
                                    
                                    sudokuBoard[i][j] = 0;
                                }
                            }
                            return false;
                        }
                    }
                }
                return true;
            }
            
            function isValidPlacement(row, col, num) {
                // Check row
                for (let i = 0; i < 9; i++) {
                    if (sudokuBoard[row][i] === num) return false;
                }
                
                // Check column
                for (let i = 0; i < 9; i++) {
                    if (sudokuBoard[i][col] === num) return false;
                }
                
                // Check 3x3 box
                const boxRow = Math.floor(row / 3) * 3;
                const boxCol = Math.floor(col / 3) * 3;
                
                for (let i = 0; i < 3; i++) {
                    for (let j = 0; j < 3; j++) {
                        if (sudokuBoard[boxRow + i][boxCol + j] === num) return false;
                    }
                }
                
                return true;
            }
            
            function shuffle(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
                return array;
            }
            
            // Hint functionality
            revealOneBtn.addEventListener('click', () => {
                // Find an empty cell
                const emptyCells = [];
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        if (sudokuBoard[row][col] === 0) {
                            emptyCells.push({row, col});
                        }
                    }
                }
                
                if (emptyCells.length > 0) {
                    const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                    const cellElement = document.querySelector(`.sudoku-cell[data-row="${randomCell.row}"][data-col="${randomCell.col}"]`);
                    
                    // Set the correct number
                    cellElement.textContent = solutionBoard[randomCell.row][randomCell.col];
                    sudokuBoard[randomCell.row][randomCell.col] = solutionBoard[randomCell.row][randomCell.col];
                    cellElement.classList.remove('user-input');
                    cellElement.classList.add('fixed');
                    cellElement.contentEditable = false;
                    
                    // Add animation
                    cellElement.animate([
                        { backgroundColor: 'rgba(76, 201, 240, 0.3)' },
                        { backgroundColor: 'white' }
                    ], {
                        duration: 1000
                    });
                }
            });
            
            revealAllBtn.addEventListener('click', () => {
                // Reveal the entire solution
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        const cellElement = document.querySelector(`.sudoku-cell[data-row="${row}"][data-col="${col}"]`);
                        
                        if (sudokuBoard[row][col] === 0) {
                            cellElement.textContent = solutionBoard[row][col];
                            sudokuBoard[row][col] = solutionBoard[row][col];
                            cellElement.classList.remove('user-input');
                            cellElement.classList.add('fixed');
                            cellElement.contentEditable = false;
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>
